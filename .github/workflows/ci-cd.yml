name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  DOTNET_VERSION: '8.0'

jobs:
  # Detect changes
  changes:
    runs-on: ubuntu-latest
    outputs:
      mobile: ${{ steps.changes.outputs.mobile }}
      web-app: ${{ steps.changes.outputs.web-app }}
      landing-page: ${{ steps.changes.outputs.landing-page }}
      api: ${{ steps.changes.outputs.api }}
      notification-service: ${{ steps.changes.outputs.notification-service }}
      queue-processor: ${{ steps.changes.outputs.queue-processor }}
      shared-types: ${{ steps.changes.outputs.shared-types }}
      ui-components: ${{ steps.changes.outputs.ui-components }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            mobile:
              - 'apps/mobile/**'
              - 'packages/**'
            web-app:
              - 'apps/web-app/**'
              - 'packages/**'
            landing-page:
              - 'apps/landing-page/**'
              - 'packages/**'
            api:
              - 'apps/api/**'
              - 'packages/shared-types/**'
            notification-service:
              - 'apps/notification-service/**'
              - 'packages/shared-types/**'
            queue-processor:
              - 'apps/queue-processor/**'
              - 'packages/shared-types/**'
            shared-types:
              - 'packages/shared-types/**'
            ui-components:
              - 'packages/ui-components/**'

  # Install dependencies
  install-deps:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}

  # Lint and type check
  lint-and-typecheck:
    needs: [install-deps]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Lint
        run: npm run lint
      - name: Type check
        run: npm run type-check

  # Build shared packages
  build-shared:
    needs: [install-deps, changes]
    runs-on: ubuntu-latest
    if: needs.changes.outputs.shared-types == 'true' || needs.changes.outputs.ui-components == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Build shared packages
        run: npm run build:packages

  # Test mobile app
  test-mobile:
    needs: [install-deps, changes]
    runs-on: ubuntu-latest
    if: needs.changes.outputs.mobile == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Test mobile app
        run: npm run test:mobile

  # Test web app
  test-web-app:
    needs: [install-deps, changes]
    runs-on: ubuntu-latest
    if: needs.changes.outputs.web-app == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Test web app
        run: npm run test:web-app

  # Test .NET API
  test-api:
    needs: [changes]
    runs-on: ubuntu-latest
    if: needs.changes.outputs.api == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: Restore dependencies
        run: dotnet restore apps/api/AiFitnessCoach.API.csproj
      - name: Build
        run: dotnet build apps/api/AiFitnessCoach.API.csproj --no-restore
      - name: Test
        run: dotnet test apps/api/AiFitnessCoach.API.csproj --no-build --verbosity normal

  # Build mobile app
  build-mobile:
    needs: [lint-and-typecheck, build-shared, test-mobile]
    runs-on: ubuntu-latest
    if: always() && (needs.test-mobile.result == 'success' || needs.test-mobile.result == 'skipped')
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Setup Expo
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          token: ${{ secrets.EXPO_TOKEN }}
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Build mobile app
        run: npm run build:mobile

  # Build web app
  build-web-app:
    needs: [lint-and-typecheck, build-shared, test-web-app]
    runs-on: ubuntu-latest
    if: always() && (needs.test-web-app.result == 'success' || needs.test-web-app.result == 'skipped')
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Build web app
        run: npm run build:web-app
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: web-app-build
          path: apps/web-app/out

  # Build landing page
  build-landing:
    needs: [lint-and-typecheck, build-shared]
    runs-on: ubuntu-latest
    if: needs.changes.outputs.landing-page == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Build landing page
        run: npm run build:landing-page
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: landing-page-build
          path: apps/landing-page/dist

  # Build API
  build-api:
    needs: [test-api]
    runs-on: ubuntu-latest
    if: always() && (needs.test-api.result == 'success' || needs.test-api.result == 'skipped')
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: Restore dependencies
        run: dotnet restore apps/api/AiFitnessCoach.API.csproj
      - name: Build
        run: dotnet build apps/api/AiFitnessCoach.API.csproj --no-restore --configuration Release
      - name: Publish
        run: dotnet publish apps/api/AiFitnessCoach.API.csproj --no-build --configuration Release --output ./api-publish
      - name: Upload API artifacts
        uses: actions/upload-artifact@v3
        with:
          name: api-build
          path: ./api-publish

  # Docker build and push
  docker-build:
    needs: [build-web-app, build-landing, build-api]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker images
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 \
            --tag ${{ secrets.DOCKERHUB_USERNAME }}/ai-fitness-coach:latest \
            --tag ${{ secrets.DOCKERHUB_USERNAME }}/ai-fitness-coach:${{ github.sha }} \
            --push .

  # Deploy to staging
  deploy-staging:
    needs: [docker-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment"
          # Add your staging deployment commands here

  # Deploy to production
  deploy-production:
    needs: [docker-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying to production environment"
          # Add your production deployment commands here
