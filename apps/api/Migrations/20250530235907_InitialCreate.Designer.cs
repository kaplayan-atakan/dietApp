// <auto-generated />
using System;
using System.Collections.Generic;
using AiFitnessCoach.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AiFitnessCoach.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250530235907_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AiFitnessCoach.API.Models.Exercise", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Equipment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("Instructions")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("MuscleGroups")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Exercises");

                    b.HasData(
                        new
                        {
                            Id = "df523a1a-f949-4d97-b1bb-fb245c5e46d4",
                            Category = "Bodyweight",
                            Description = "A bodyweight exercise that targets chest, shoulders, and triceps",
                            Difficulty = "beginner",
                            Equipment = "[]",
                            ImageUrl = "",
                            Instructions = new List<string> { "Start in a plank position with hands shoulder-width apart", "Lower your body until chest nearly touches the floor", "Push back up to starting position" },
                            MuscleGroups = "[\"Chest\",\"Shoulders\",\"Triceps\"]",
                            Name = "Push-up",
                            VideoUrl = ""
                        },
                        new
                        {
                            Id = "1e794659-bcab-442f-a712-de8a819f9d74",
                            Category = "Bodyweight",
                            Description = "A fundamental lower body exercise",
                            Difficulty = "beginner",
                            Equipment = "[]",
                            ImageUrl = "",
                            Instructions = new List<string> { "Stand with feet shoulder-width apart", "Lower your body as if sitting back into a chair", "Return to standing position" },
                            MuscleGroups = "[\"Quadriceps\",\"Glutes\",\"Hamstrings\"]",
                            Name = "Squat",
                            VideoUrl = ""
                        });
                });

            modelBuilder.Entity("AiFitnessCoach.API.Models.ExerciseLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExerciseId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("RestTime")
                        .HasColumnType("integer");

                    b.Property<string>("Sets")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WorkoutLogId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ExerciseLog");
                });

            modelBuilder.Entity("AiFitnessCoach.API.Models.Food", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<double>("ServingSize")
                        .HasColumnType("double precision");

                    b.Property<string>("ServingUnit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Food");
                });

            modelBuilder.Entity("AiFitnessCoach.API.Models.MealLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Foods")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LoggedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MealType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("TotalCalories")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MealLog");
                });

            modelBuilder.Entity("AiFitnessCoach.API.Models.NutritionLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("NutritionLogs");
                });

            modelBuilder.Entity("AiFitnessCoach.API.Models.Recipe", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("CookTime")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ingredients")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("PrepTime")
                        .HasColumnType("integer");

                    b.Property<int>("Servings")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Recipe");
                });

            modelBuilder.Entity("AiFitnessCoach.API.Models.ScheduledNotification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsSent")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ScheduledFor")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ScheduledNotification");
                });

            modelBuilder.Entity("AiFitnessCoach.API.Models.Workout", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int?>("ActualDuration")
                        .HasColumnType("integer");

                    b.Property<int?>("CaloriesBurned")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EstimatedDuration")
                        .HasColumnType("integer");

                    b.Property<int>("ExerciseCount")
                        .HasColumnType("integer");

                    b.Property<string>("Exercises")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Workouts");
                });

            modelBuilder.Entity("AiFitnessCoach.API.Models.WorkoutTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EstimatedDuration")
                        .HasColumnType("integer");

                    b.Property<int>("ExerciseCount")
                        .HasColumnType("integer");

                    b.Property<string>("Exercises")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UsageCount")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WorkoutTemplate");
                });

            modelBuilder.Entity("AiFitnessCoach.Shared.Models.Achievement", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IconUrl")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UnlockedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("AiFitnessCoach.Shared.Models.BodyMetrics", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal?>("BMI")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("BodyFatPercentage")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Measurements")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("MusclePercentage")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("BodyMetrics");
                });

            modelBuilder.Entity("AiFitnessCoach.Shared.Models.ExerciseTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Equipment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("Images")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("MuscleGroups")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("Reps")
                        .HasColumnType("integer");

                    b.Property<int>("RestTime")
                        .HasColumnType("integer");

                    b.Property<int>("Sets")
                        .HasColumnType("integer");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("text");

                    b.Property<string>("WorkoutTemplateId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutTemplateId");

                    b.ToTable("ExerciseTemplate");
                });

            modelBuilder.Entity("AiFitnessCoach.Shared.Models.Food", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Allergens")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ServingSize")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("AiFitnessCoach.Shared.Models.Goal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("CurrentValue")
                        .HasColumnType("numeric");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("TargetValue")
                        .HasColumnType("numeric");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("AiFitnessCoach.Shared.Models.MealItem", b =>
                {
                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("MealItem");
                });

            modelBuilder.Entity("AiFitnessCoach.Shared.Models.MealLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FoodId")
                        .HasColumnType("text");

                    b.Property<string>("Items")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LoggedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MealType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<string>("RecipeId")
                        .HasColumnType("text");

                    b.Property<decimal>("TotalCalories")
                        .HasColumnType("numeric");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MealLogs");
                });

            modelBuilder.Entity("AiFitnessCoach.Shared.Models.MealPlan", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Meals")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MealPlans");
                });

            modelBuilder.Entity("AiFitnessCoach.Shared.Models.Notification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSent")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ScheduledFor")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("AiFitnessCoach.Shared.Models.NotificationHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("NotificationHistory");
                });

            modelBuilder.Entity("AiFitnessCoach.Shared.Models.NotificationSettings", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("AchievementNotificationsEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("Achievements")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("GoalDeadlines")
                        .HasColumnType("boolean");

                    b.Property<bool>("MealReminders")
                        .HasColumnType("boolean");

                    b.Property<bool>("MealRemindersEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("PreferredMealTimes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PreferredWorkoutTimes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ProgressReminders")
                        .HasColumnType("boolean");

                    b.Property<bool>("ProgressRemindersEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("PushNotificationsEnabled")
                        .HasColumnType("boolean");

                    b.Property<TimeSpan?>("QuietHoursEnd")
                        .HasColumnType("interval");

                    b.Property<TimeSpan?>("QuietHoursStart")
                        .HasColumnType("interval");

                    b.Property<TimeSpan?>("QuietTimeEnd")
                        .HasColumnType("interval");

                    b.Property<TimeSpan?>("QuietTimeStart")
                        .HasColumnType("interval");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("WeeklyReports")
                        .HasColumnType("boolean");

                    b.Property<bool>("WeeklyReportsEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("WorkoutReminders")
                        .HasColumnType("boolean");

                    b.Property<bool>("WorkoutRemindersEnabled")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("NotificationSettings");
                });

            modelBuilder.Entity("AiFitnessCoach.Shared.Models.NotificationTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Variables")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("NotificationTemplates");
                });

            modelBuilder.Entity("AiFitnessCoach.Shared.Models.PlannedMeal", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("MealType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RecipeId")
                        .HasColumnType("text");

                    b.Property<string>("RecipeName")
                        .HasColumnType("text");

                    b.ToTable("PlannedMeal");
                });

            modelBuilder.Entity("AiFitnessCoach.Shared.Models.ProgressLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal?>("BodyFatPercentage")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomMetrics")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Measurements")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("MusclePercentage")
                        .HasColumnType("numeric");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Photos")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("ProgressLogs");
                });

            modelBuilder.Entity("AiFitnessCoach.Shared.Models.Recipe", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("CookTime")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Ingredients")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("PrepTime")
                        .HasColumnType("integer");

                    b.Property<int>("Servings")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("AiFitnessCoach.Shared.Models.ScheduledNotification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSent")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ScheduledFor")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ScheduledNotifications");
                });

            modelBuilder.Entity("AiFitnessCoach.Shared.Models.Streak", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("BestCount")
                        .HasColumnType("integer");

                    b.Property<int>("CurrentCount")
                        .HasColumnType("integer");

                    b.Property<int>("CurrentStreak")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastActivityDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LongestStreak")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Streaks");
                });

            modelBuilder.Entity("AiFitnessCoach.Shared.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ActivityLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DietaryRestrictions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Goals")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Height")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AiFitnessCoach.Shared.Models.UserDevice", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DeviceToken")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUsed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "DeviceToken")
                        .IsUnique();

                    b.ToTable("UserDevices");
                });

            modelBuilder.Entity("AiFitnessCoach.Shared.Models.UserGoals", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DailyCalories")
                        .HasColumnType("numeric");

                    b.Property<decimal>("DailyCarbGoal")
                        .HasColumnType("numeric");

                    b.Property<decimal>("DailyFatGoal")
                        .HasColumnType("numeric");

                    b.Property<decimal>("DailyProteinGoal")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<decimal>("TargetWeight")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("WeeklyWorkouts")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("UserGoals");
                });

            modelBuilder.Entity("AiFitnessCoach.Shared.Models.UserSettings", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("EmailNotifications")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PrivacyLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("PushNotifications")
                        .HasColumnType("boolean");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("AiFitnessCoach.Shared.Models.WorkoutLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("CaloriesBurned")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("Exercises")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WorkoutTemplateId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WorkoutLogs");
                });

            modelBuilder.Entity("AiFitnessCoach.Shared.Models.WorkoutTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Equipment")
                        .HasColumnType("text");

                    b.Property<int>("EstimatedDuration")
                        .HasColumnType("integer");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<List<string>>("MuscleGroups")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WorkoutTemplates");
                });

            modelBuilder.Entity("AiFitnessCoach.API.Models.Food", b =>
                {
                    b.OwnsOne("AiFitnessCoach.API.Models.NutritionInfo", "Nutrition", b1 =>
                        {
                            b1.Property<string>("FoodId")
                                .HasColumnType("text");

                            b1.Property<double>("Calories")
                                .HasColumnType("double precision");

                            b1.Property<double>("Carbs")
                                .HasColumnType("double precision");

                            b1.Property<double>("Fat")
                                .HasColumnType("double precision");

                            b1.Property<double>("Fiber")
                                .HasColumnType("double precision");

                            b1.Property<double>("Protein")
                                .HasColumnType("double precision");

                            b1.Property<double>("Sodium")
                                .HasColumnType("double precision");

                            b1.Property<double>("Sugar")
                                .HasColumnType("double precision");

                            b1.HasKey("FoodId");

                            b1.ToTable("Food");

                            b1.ToJson("Nutrition");

                            b1.WithOwner()
                                .HasForeignKey("FoodId");
                        });

                    b.Navigation("Nutrition")
                        .IsRequired();
                });

            modelBuilder.Entity("AiFitnessCoach.API.Models.MealLog", b =>
                {
                    b.OwnsOne("AiFitnessCoach.API.Models.NutritionInfo", "Nutrition", b1 =>
                        {
                            b1.Property<string>("MealLogId")
                                .HasColumnType("text");

                            b1.Property<double>("Calories")
                                .HasColumnType("double precision");

                            b1.Property<double>("Carbs")
                                .HasColumnType("double precision");

                            b1.Property<double>("Fat")
                                .HasColumnType("double precision");

                            b1.Property<double>("Fiber")
                                .HasColumnType("double precision");

                            b1.Property<double>("Protein")
                                .HasColumnType("double precision");

                            b1.Property<double>("Sodium")
                                .HasColumnType("double precision");

                            b1.Property<double>("Sugar")
                                .HasColumnType("double precision");

                            b1.HasKey("MealLogId");

                            b1.ToTable("MealLog");

                            b1.ToJson("Nutrition");

                            b1.WithOwner()
                                .HasForeignKey("MealLogId");
                        });

                    b.Navigation("Nutrition")
                        .IsRequired();
                });

            modelBuilder.Entity("AiFitnessCoach.API.Models.NutritionLog", b =>
                {
                    b.OwnsOne("AiFitnessCoach.API.Models.NutritionInfo", "Goals", b1 =>
                        {
                            b1.Property<string>("NutritionLogId")
                                .HasColumnType("text");

                            b1.Property<double>("Calories")
                                .HasColumnType("double precision");

                            b1.Property<double>("Carbs")
                                .HasColumnType("double precision");

                            b1.Property<double>("Fat")
                                .HasColumnType("double precision");

                            b1.Property<double>("Fiber")
                                .HasColumnType("double precision");

                            b1.Property<double>("Protein")
                                .HasColumnType("double precision");

                            b1.Property<double>("Sodium")
                                .HasColumnType("double precision");

                            b1.Property<double>("Sugar")
                                .HasColumnType("double precision");

                            b1.HasKey("NutritionLogId");

                            b1.ToTable("NutritionLogs");

                            b1.ToJson("Goals");

                            b1.WithOwner()
                                .HasForeignKey("NutritionLogId");
                        });

                    b.OwnsOne("AiFitnessCoach.API.Models.NutritionInfo", "Totals", b1 =>
                        {
                            b1.Property<string>("NutritionLogId")
                                .HasColumnType("text");

                            b1.Property<double>("Calories")
                                .HasColumnType("double precision");

                            b1.Property<double>("Carbs")
                                .HasColumnType("double precision");

                            b1.Property<double>("Fat")
                                .HasColumnType("double precision");

                            b1.Property<double>("Fiber")
                                .HasColumnType("double precision");

                            b1.Property<double>("Protein")
                                .HasColumnType("double precision");

                            b1.Property<double>("Sodium")
                                .HasColumnType("double precision");

                            b1.Property<double>("Sugar")
                                .HasColumnType("double precision");

                            b1.HasKey("NutritionLogId");

                            b1.ToTable("NutritionLogs");

                            b1.ToJson("Totals");

                            b1.WithOwner()
                                .HasForeignKey("NutritionLogId");
                        });

                    b.Navigation("Goals")
                        .IsRequired();

                    b.Navigation("Totals")
                        .IsRequired();
                });

            modelBuilder.Entity("AiFitnessCoach.API.Models.Recipe", b =>
                {
                    b.OwnsOne("AiFitnessCoach.API.Models.NutritionInfo", "Nutrition", b1 =>
                        {
                            b1.Property<string>("RecipeId")
                                .HasColumnType("text");

                            b1.Property<double>("Calories")
                                .HasColumnType("double precision");

                            b1.Property<double>("Carbs")
                                .HasColumnType("double precision");

                            b1.Property<double>("Fat")
                                .HasColumnType("double precision");

                            b1.Property<double>("Fiber")
                                .HasColumnType("double precision");

                            b1.Property<double>("Protein")
                                .HasColumnType("double precision");

                            b1.Property<double>("Sodium")
                                .HasColumnType("double precision");

                            b1.Property<double>("Sugar")
                                .HasColumnType("double precision");

                            b1.HasKey("RecipeId");

                            b1.ToTable("Recipe");

                            b1.ToJson("Nutrition");

                            b1.WithOwner()
                                .HasForeignKey("RecipeId");
                        });

                    b.Navigation("Nutrition")
                        .IsRequired();
                });

            modelBuilder.Entity("AiFitnessCoach.Shared.Models.ExerciseTemplate", b =>
                {
                    b.HasOne("AiFitnessCoach.Shared.Models.WorkoutTemplate", null)
                        .WithMany("Exercises")
                        .HasForeignKey("WorkoutTemplateId");
                });

            modelBuilder.Entity("AiFitnessCoach.Shared.Models.Food", b =>
                {
                    b.OwnsOne("AiFitnessCoach.Shared.Models.NutritionInfo", "NutritionPer100g", b1 =>
                        {
                            b1.Property<string>("FoodId")
                                .HasColumnType("text");

                            b1.Property<decimal>("Calories")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("Carbohydrates")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("Fat")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("Fiber")
                                .HasColumnType("numeric");

                            b1.Property<string>("Minerals")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<decimal>("Protein")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("Sodium")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("Sugar")
                                .HasColumnType("numeric");

                            b1.Property<string>("Vitamins")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("FoodId");

                            b1.ToTable("Foods");

                            b1.WithOwner()
                                .HasForeignKey("FoodId");
                        });

                    b.Navigation("NutritionPer100g")
                        .IsRequired();
                });

            modelBuilder.Entity("AiFitnessCoach.Shared.Models.MealLog", b =>
                {
                    b.OwnsOne("AiFitnessCoach.Shared.Models.NutritionInfo", "NutritionInfo", b1 =>
                        {
                            b1.Property<string>("MealLogId")
                                .HasColumnType("text");

                            b1.Property<decimal>("Calories")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("Carbohydrates")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("Fat")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("Fiber")
                                .HasColumnType("numeric");

                            b1.Property<string>("Minerals")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<decimal>("Protein")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("Sodium")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("Sugar")
                                .HasColumnType("numeric");

                            b1.Property<string>("Vitamins")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("MealLogId");

                            b1.ToTable("MealLogs");

                            b1.WithOwner()
                                .HasForeignKey("MealLogId");
                        });

                    b.Navigation("NutritionInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("AiFitnessCoach.Shared.Models.MealPlan", b =>
                {
                    b.OwnsOne("AiFitnessCoach.Shared.Models.NutritionGoals", "DailyTargets", b1 =>
                        {
                            b1.Property<string>("MealPlanId")
                                .HasColumnType("text");

                            b1.Property<decimal>("CalorieGoal")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("CarbGoal")
                                .HasColumnType("numeric");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<decimal>("FatGoal")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("FiberGoal")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("ProteinGoal")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("SodiumLimit")
                                .HasColumnType("numeric");

                            b1.Property<DateTime>("UpdatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("UserId")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("MealPlanId");

                            b1.ToTable("MealPlans");

                            b1.WithOwner()
                                .HasForeignKey("MealPlanId");
                        });

                    b.Navigation("DailyTargets")
                        .IsRequired();
                });

            modelBuilder.Entity("AiFitnessCoach.Shared.Models.Recipe", b =>
                {
                    b.OwnsOne("AiFitnessCoach.Shared.Models.NutritionInfo", "NutritionInfo", b1 =>
                        {
                            b1.Property<string>("RecipeId")
                                .HasColumnType("text");

                            b1.Property<decimal>("Calories")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("Carbohydrates")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("Fat")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("Fiber")
                                .HasColumnType("numeric");

                            b1.Property<string>("Minerals")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<decimal>("Protein")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("Sodium")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("Sugar")
                                .HasColumnType("numeric");

                            b1.Property<string>("Vitamins")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("RecipeId");

                            b1.ToTable("Recipes");

                            b1.WithOwner()
                                .HasForeignKey("RecipeId");
                        });

                    b.OwnsOne("AiFitnessCoach.Shared.Models.NutritionInfo", "NutritionPerServing", b1 =>
                        {
                            b1.Property<string>("RecipeId")
                                .HasColumnType("text");

                            b1.Property<decimal>("Calories")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("Carbohydrates")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("Fat")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("Fiber")
                                .HasColumnType("numeric");

                            b1.Property<string>("Minerals")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<decimal>("Protein")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("Sodium")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("Sugar")
                                .HasColumnType("numeric");

                            b1.Property<string>("Vitamins")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("RecipeId");

                            b1.ToTable("Recipes");

                            b1.WithOwner()
                                .HasForeignKey("RecipeId");
                        });

                    b.Navigation("NutritionInfo")
                        .IsRequired();

                    b.Navigation("NutritionPerServing")
                        .IsRequired();
                });

            modelBuilder.Entity("AiFitnessCoach.Shared.Models.WorkoutTemplate", b =>
                {
                    b.Navigation("Exercises");
                });
#pragma warning restore 612, 618
        }
    }
}
